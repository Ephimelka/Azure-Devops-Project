# azure-pipelines.yml

# Trigger the pipeline on changes to the main branch
trigger:
  branches:
    include:
      - main  # Adjust this to your branch

# Use the latest Ubuntu VM image
pool:
  vmImage: 'ubuntu-latest'

# Define build and deployment stages
stages:
  - stage: Teraform
    displayName: 'teraform Stage'
    jobs:
      - job: teraform
        displayName: 'teraform Job'
        timeoutInMinutes: 120  # Set job timeout to 120 minutes
        steps:
          # Checkout code
          - checkout: self

          # Install Terraform using the command line
          - script: |
              curl -o terraform.zip https://releases.hashicorp.com/terraform/1.0.11/terraform_1.0.11_linux_amd64.zip
              unzip terraform.zip
              sudo mv terraform /usr/local/bin/
              terraform -version
            displayName: 'Install Terraform'

          # Authenticate with Azure using a Service Principal and enable Terraform debugging
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'ephi-service-conn'  # Azure DevOps service connection
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                
                
                # Enable Terraform debug logging
                export TF_LOG=DEBUG
                export TF_LOG_PATH="terraform_debug.log"  # Specify a log file

                # Set the required Terraform variables as environment variables
                export TF_VAR_client_id=$(ARM_CLIENT_ID)
                export TF_VAR_client_secret=$(ARM_CLIENT_SECRET)
                export TF_VAR_tenant_id=$(ARM_TENANT_ID)
                export TF_VAR_subscription_id=$(ARM_SUBSCRIPTION_ID)

                # Change to the directory containing Terraform files if necessary
                # cd terraform

                # Terraform commands with debug logging
                terraform init | tee -a $TF_LOG_PATH
                terraform plan -target=module.Create_App_Service | tee -a $TF_LOG_PATH
                terraform apply -target=module.Create_App_Service -auto-approve | tee -a $TF_LOG_PATH

            displayName: 'Provision Infrastructure with Terraform'
            timeoutInMinutes: 90  # Specify timeout for this step, in minutes

  - stage: Build
    displayName: 'Build Stage'
    jobs:
      - job: Build
        displayName: 'Build Job'
        steps:
          # Checkout code
          - checkout: self

          # Install Node.js
          - task: NodeTool@0
            inputs:
              versionSpec: '20.x'  # Specify your Node.js version here
            displayName: 'Install Node.js'

          # Install npm dependencies
          - script: |
              npm install
            displayName: 'Install Dependencies'

          # Build the application
          - script: |
              npm run build
            displayName: 'Build Application'

          # Create a ZIP file of the build output
          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: '$(Build.ArtifactStagingDirectory)'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
              replaceExistingArchive: true
            displayName: 'Archive Build Output'

          # Deploy the Node.js app to the Azure App Service
          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'ephi-service-conn'
              appType: 'webAppLinux'
              WebAppName: 'EphiDevops'
              packageForLinux: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'