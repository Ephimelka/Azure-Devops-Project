# Trigger the pipeline on changes to the main branch
trigger:
  branches:
    include:
      - main  # Specify the branch to trigger this pipeline

# Define variables for reusability
variables:
  terraformVersion: '1.0.11'
  buildTimeout: 120
  appServiceName: 'EphiDevops'
  nodeVersion: '22.x'

# Use the latest Ubuntu VM image
pool:
  vmImage: 'ubuntu-latest'

# Define stages for the pipeline
stages:
  - stage: Terraform
    displayName: 'Terraform Infrastructure Setup'
    jobs:
      - job: Terraform
        displayName: 'Terraform Provisioning'
        timeoutInMinutes: ${{ variables.buildTimeout }}
        steps:
          # Checkout code
          - checkout: self

          # Install Terraform manually
          - script: |
              echo "Installing Terraform..."
              curl -o terraform.zip https://releases.hashicorp.com/terraform/${{ variables.terraformVersion }}/terraform_${{ variables.terraformVersion }}_linux_amd64.zip
              unzip terraform.zip
              sudo mv terraform /usr/local/bin/
              terraform -version
            displayName: 'Install Terraform'

          # Authenticate with Azure and execute Terraform
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'ephi-service-conn'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                # Enable Terraform logging
                export TF_LOG=INFO
                export TF_LOG_PATH="terraform.log"

                # Set required Terraform environment variables
                export TF_VAR_client_id=$ARM_CLIENT_ID
                export TF_VAR_client_secret=$ARM_CLIENT_SECRET
                export TF_VAR_tenant_id=$ARM_TENANT_ID
                export TF_VAR_subscription_id=$ARM_SUBSCRIPTION_ID

                # Initialize Terraform
                terraform init | tee -a $TF_LOG_PATH

                # Plan and Apply specific module
                terraform plan -target=module.Create_App_Service | tee -a $TF_LOG_PATH
                terraform apply -target=module.Create_App_Service -auto-approve | tee -a $TF_LOG_PATH
            displayName: 'Execute Terraform Scripts'

  - stage: Build
    displayName: 'Build Application'
    jobs:
      - job: Build
        displayName: 'Build Job'
        timeoutInMinutes: ${{ variables.buildTimeout }}
        steps:
          # Checkout code
          - checkout: self

          # Install Node.js
          - task: NodeTool@0
            inputs:
              versionSpec: ${{ variables.nodeVersion }}
            displayName: 'Install Node.js'

          # Install dependencies
          - script: |
              npm ci  # Cleaner and faster alternative to npm install
            displayName: 'Install Dependencies'

          # Build the application
          - script: |
              npm run build
            displayName: 'Build Application'

          # Archive the build output
          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: '$(Build.SourcesDirectory)/build'  # Specify the build directory
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
              replaceExistingArchive: true
            displayName: 'Archive Build Output'

          # Publish the archive as a build artifact
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
              ArtifactName: 'BuildOutput'
            displayName: 'Publish Build Artifact'

  - stage: Deploy
    displayName: 'Deploy to Azure'
    dependsOn: Build
    jobs:
      - job: Deploy
        displayName: 'Deploy Job'
        timeoutInMinutes: ${{ variables.buildTimeout }}
        steps:
          # Checkout code (optional, if deployment scripts are in repo)
          - checkout: self

          # Deploy the Node.js app to the Azure App Service
          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'ephi-service-conn'
              appType: 'webAppLinux'
              WebAppName: ${{ variables.appServiceName }}
              packageForLinux: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
            displayName: 'Deploy Application to Azure App Service'
